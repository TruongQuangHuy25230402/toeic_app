

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid()) @map("_id")
  username    String
  email       String        @unique
  profilePic  String
  clerkUserId String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  quizResults QuizResult[]
  answers     UserAnswer[]
  examResults ExamResult[]  // Quan hệ với ExamResult để lưu kết quả thi của user
}


model Admin {
  id          String       @id @default(cuid()) @map("_id")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model QuizResult {
  id             String   @id @default(cuid()) @map("_id")
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  quizScore      Int
  correctAnswers Int
  wrongAnswers   Int
  createdAt      DateTime @default(now())
}

model Exam {
  id          String       @id @default(cuid()) @map("_id")
  title       String
  description String
  audioFile   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  participantCount Int          @default(0) // Thêm thuộc tính này
// Quan hệ với các phần câu hỏi
  part1s QuestionPart1[]
  part2s QuestionPart2[]
  part3s QuestionPart3[]
  part4s QuestionPart4[]
  part5s QuestionPart5[]
  part6s QuestionPart6[]
  part7s QuestionPart7[]
  userAnswers UserAnswer[]    // Quan hệ với UserAnswer để lưu câu trả lời
  examResults ExamResult[]    // Quan hệ với ExamResult để lưu kết quả thi của các user
}

model TopicPart1 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions1  QuestionPart1[]  @relation("TopicToQuestionPart1")
}

model TopicPart2 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions2  QuestionPart2[]  @relation("TopicToQuestionPart2")
}

model TopicPart3 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions3  QuestionPart3[]  @relation("TopicToQuestionPart3")
}

model TopicPart4 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions4  QuestionPart4[]  @relation("TopicToQuestionPart4")
}

model TopicPart5 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions5  QuestionPart5[]  @relation("TopicToQuestionPart5")
}

model TopicPart6 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions6  QuestionPart6[]  @relation("TopicToQuestionPart6")
}

model TopicPart7 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions7  QuestionPart7[]  @relation("TopicToQuestionPart7")
}


model QuestionPart1 {
  id             String      @id @default(cuid()) @map("_id")
  audioFile      String   
  imageFile      String   
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  topicId        String
  groupId        String?
  
  Topic  TopicPart1?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart1") // Quan hệ với chủ đề
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart1")
  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  @@index([examId])
   

}



model QuestionPart2 {
  id             String      @id @default(cuid()) @map("_id")
  imageFile      String?  
  audioFile      String      
  answer1        String
  answer2        String
  answer3        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  topicId        String
  groupId        String?

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart2")
  Topic  TopicPart2?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart2") // Quan hệ với chủ đề
  
  @@index([examId])
   }

model QuestionPart3 {
  id             String      @id @default(cuid()) @map("_id")
  questionText   String
  audioFile      String
  imageFile      String   
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  groupId        String?
  examId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart3")
  Topic  TopicPart3?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart3") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   
}

model QuestionPart4 {
  id             String      @id @default(cuid()) @map("_id")
  questionText   String
  audioFile      String   
  imageFile      String   
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  groupId        String?

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart4")
  Topic  TopicPart4?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart4") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   }

model QuestionPart5 {
  id             String      @id @default(cuid()) @map("_id")
  imageFile      String?  
  questionText   String  
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  groupId        String?

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart5")
  Topic  TopicPart5?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart5") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   }

model QuestionPart6 {
  id             String      @id @default(cuid()) @map("_id") 
  imageFile      String  
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
 createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  groupId        String?

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart6")
  Topic  TopicPart6?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart6") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
  }

model QuestionPart7 {
  id             String      @id @default(cuid()) @map("_id")
  questionText   String
  imageFile      String
  imageFile2     String?
  imageFile3     String?
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
   groupId        String?

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAnswerDetails UserAnswerDetail[] @relation(name: "UserAnswerDetailToQuestionPart7")
  Topic  TopicPart7?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart7") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   }

model ExamResult {
  id             String     @id @default(cuid()) @map("_id")
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  exam           Exam       @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId         String
  
  scoreListening Int        // Điểm phần nghe
  scoreReading   Int        // Điểm phần đọc
  totalScore     Int        // Tổng điểm
  numberCorrect  Int        // Số câu đúng
  numberWrong    Int        // Số câu sai
  numberSkip     Int        // Số câu bỏ qua

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([userId, examId], name: "user_exam_index")
}

model UserAnswer {
  id                String         @id @default(cuid()) @map("_id")
  user              User           @relation(fields: [userId], references: [id])
  userId            String

  exam              Exam?          @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId            String?

  scoreListening    Int
  scoreReading      Int
  totalScore        Int
  numberCorrect     Int
  numberWrong       Int
  numberSkip        Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  UserAnswerDetail  UserAnswerDetail[]

  @@index([examId])
}

model UserAnswerDetail {
  id            String       @id @default(cuid()) @map("_id")
  userAnswer    UserAnswer   @relation(fields: [userAnswerId], references: [id], onDelete: Cascade)
  userAnswerId  String
  questionId    String       // liên kết tới câu hỏi cụ thể
  selectedAnswer String
  isCorrect     Boolean
  isSkipped     Boolean
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Liên kết với các phần câu hỏi để truy xuất thông tin chi tiết
  questionPart1   QuestionPart1? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart1")
  questionPart2   QuestionPart2? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart2")
  questionPart3   QuestionPart3? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart3")
  questionPart4   QuestionPart4? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart4")
  questionPart5   QuestionPart5? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart5")
  questionPart6   QuestionPart6? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart6")
  questionPart7   QuestionPart7? @relation(fields: [questionId], references: [id], name: "UserAnswerDetailToQuestionPart7")
}


model Course {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  title      String
  description String?
  imageUrl   String?
  price      Float? 
  isPublished Boolean?   @default(false)
  categoryId String?     @db.ObjectId
  category   Category?   @relation(fields: [categoryId], references: [id])
  chapters   Chapter[]
  attachments Attachment[]
  purchases  Purchase[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([categoryId])
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  courses Course[]
}

model Attachment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String    @db.ObjectId
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([courseId])
}

model Chapter {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  description String?
  videoUrl   String?
  position   Int
  isPublished Boolean   @default(false)
  isFree     Boolean    @default(false)

  muxData    MuxData?
  courseId   String     @db.ObjectId
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@index([courseId])
}

model MuxData {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  chapterId  String     @db.ObjectId @unique
  chapter    Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  chapterId  String     @db.ObjectId
  chapter    Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean   @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  courseId   String     @db.ObjectId
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  userId           String     @unique
  stripeCustomerId String     @unique

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}


