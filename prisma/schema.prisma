

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid()) @map("_id")
  username    String
  email       String       @unique
  profilePic  String
  clerkUserId String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  quizResults QuizResult[]
  answers     UserAnswer[]
}


model Admin {
  id          String       @id @default(cuid()) @map("_id")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model QuizResult {
  id             String   @id @default(cuid()) @map("_id")
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  quizScore      Int
  correctAnswers Int
  wrongAnswers   Int
  createdAt      DateTime @default(now())
}

model Exam {
  id          String       @id @default(cuid()) @map("_id")
  title       String
  description String
  audioFile   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
// Quan hệ với các phần câu hỏi
  part1s QuestionPart1[]
  part2s QuestionPart2[]
  part3s QuestionPart3[]
  part4s QuestionPart4[]
  part5s QuestionPart5[]
  part6s QuestionPart6[]
  part7s QuestionPart7[]
  user   UserAnswer[]
}

model TopicPart1 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions1  QuestionPart1[]  @relation("TopicToQuestionPart1")
}

model TopicPart2 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions2  QuestionPart2[]  @relation("TopicToQuestionPart2")
}

model TopicPart3 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions3  QuestionPart3[]  @relation("TopicToQuestionPart3")
}

model TopicPart4 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions4  QuestionPart4[]  @relation("TopicToQuestionPart4")
}

model TopicPart5 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions5  QuestionPart5[]  @relation("TopicToQuestionPart5")
}

model TopicPart6 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions6  QuestionPart6[]  @relation("TopicToQuestionPart6")
}

model TopicPart7 {
  id          String           @id @default(cuid()) @map("_id")
  name        String           // Tên chủ đề
  questions7  QuestionPart7[]  @relation("TopicToQuestionPart7")
}


model QuestionPart1 {
  id             String      @id @default(cuid()) @map("_id")
  audioFile      String   
  imageFile      String   
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  topicId        String
  
  Topic  TopicPart1?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart1") // Quan hệ với chủ đề
  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart1")

}



model QuestionPart2 {
  id             String      @id @default(cuid()) @map("_id")
  audioFile      String      
  answer1        String
  answer2        String
  answer3        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String
  topicId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  Topic  TopicPart2?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart2") // Quan hệ với chủ đề
  
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart2")
}

model QuestionPart3 {
  id             String      @id @default(cuid()) @map("_id")
  questionText   String
  audioFile      String
  imageFile      String   
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  Topic  TopicPart3?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart3") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart3")

}

model QuestionPart4 {
  id             String      @id @default(cuid()) @map("_id")
  questionText   String
  audioFile      String   
  imageFile      String   
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  Topic  TopicPart4?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart4") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart4")
}

model QuestionPart5 {
  id             String      @id @default(cuid()) @map("_id")
  questionText   String  
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  Topic  TopicPart5?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart5") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart5")
}

model QuestionPart6 {
  id             String      @id @default(cuid()) @map("_id") 
  imageFile      String  
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
 createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  Topic  TopicPart6?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart6") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart6")
}

model QuestionPart7 {
  id             String      @id @default(cuid()) @map("_id")
  imageFile      String 
  answer1        String
  answer2        String
  answer3        String
  answer4        String
  correctAnswer  String      // Đáp án đúng
  explainAnswer  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examId        String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  Topic  TopicPart7?  @relation(fields: [topicId], references: [id], name: "TopicToQuestionPart7") // Quan hệ với chủ đề
  topicId        String
  @@index([examId])
   userAnswers    UserAnswer[] @relation(name: "RelationToQuestionPart7")
}

model UserAnswer {
  id                String         @id @default(cuid()) @map("_id")
  user              User           @relation(fields: [userId], references: [id])
  userId            String

  part1sId   String
  part2sId   String
  part3sId   String
  part4sId   String
  part5sId   String
  part6sId   String
  part7sId   String
  
  part1s     QuestionPart1? @relation(fields: [part1sId], references: [id], name: "RelationToQuestionPart1")
  part2s     QuestionPart2? @relation(fields: [part2sId], references: [id], name: "RelationToQuestionPart2")
  part3s     QuestionPart3? @relation(fields: [part3sId], references: [id], name: "RelationToQuestionPart3")
  part4s     QuestionPart4? @relation(fields: [part4sId], references: [id], name: "RelationToQuestionPart4")
  part5s     QuestionPart5? @relation(fields: [part5sId], references: [id], name: "RelationToQuestionPart5")
  part6s     QuestionPart6? @relation(fields: [part6sId], references: [id], name: "RelationToQuestionPart6")
  part7s     QuestionPart7? @relation(fields: [part7sId], references: [id], name: "RelationToQuestionPart7")

  selectedAnswer   String      // Câu trả lời của người dùng
  isCorrect        Boolean     // Đúng hay sai
  isSkipped        Boolean     // Có bỏ qua hay không
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  scoreListening   String
  scoreReading     String
  totalScore       String
  numberCorrect    String
  numberWrong      String
  numberSkip       String
  numberUser       String

  examId           String
  examOwnerId      String
  date             DateTime
  time             String

  Exam Exam? @relation(fields: [examId], references: [id], onDelete: Cascade)
  @@index([examId])
}

model Course {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  title      String
  description String?
  imageUrl   String?
  price      Float? 
  isPublished Boolean?   @default(false)
  categoryId String?     @db.ObjectId
  category   Category?   @relation(fields: [categoryId], references: [id])
  chapters   Chapter[]
  attachments Attachment[]
  purchases  Purchase[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([categoryId])
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  courses Course[]
}

model Attachment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String    @db.ObjectId
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([courseId])
}

model Chapter {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  description String?
  videoUrl   String?
  position   Int
  isPublished Boolean   @default(false)
  isFree     Boolean    @default(false)

  muxData    MuxData?
  courseId   String     @db.ObjectId
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@index([courseId])
}

model MuxData {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  chapterId  String     @db.ObjectId @unique
  chapter    Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  chapterId  String     @db.ObjectId
  chapter    Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean   @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  courseId   String     @db.ObjectId
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  userId           String     @unique
  stripeCustomerId String     @unique

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}


